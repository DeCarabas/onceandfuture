Notes on Building:
==================

Right now our Dockerfile builds Mono from Doty's private base image that is
pre-staged with a built copy of Mono, from source, in /opt/mono. At some point
we'll want to convert to using packages or something, but for now it's what
we got.

Todo:
=======

UI:
- Account creation flow
- Recover lost password flow
- Add/remove river sets
- More/less UX is jarring. Fixing this, though, requires restricting the
  number of items that I can have in a river at once, at least initially.
- Import/export OPML
- Font size for bubbles is wrong.
- When removing a feed, remove from sources.
- Force line breaks on titles (they are very long when they have urls)
- Hook progress to adding feed, including idle ping

Back-end Stuff:
- Measure things:
  - Number of concurrent HTTP connections
  - Latencies of various things
- Replace inline log with static log method
- Login cookie cache scrubber
- Max request size
- Limit on HTTP response sizes, strong timeouts
  - Remember that attackers dictate URLs.
- Throttle login requests
- Send email

Tests:
- Some known feed snapshots, check to make sure rivers match. (Make sure
  to mock the web and return fake images, &c.)

Shipping:
- Re-pack font awesome fonts
- Use packed/minified/precompiled source if it exists
- Implement ATOM cache timeout and RSS skip hours and the like to poll more
  intelligently.
- Clip titles that are too long. (Because seriously.)

Later:
- Extract enclosures and the like, store locally (in the DB) and present them
  in the river. (Then do UI work to expose audio enclosures and the like.)
- Trim rivers that get too big

Far future:
- For the future, we'll probably need options on individual feeds for
  processing to make them better. It is possible to over-engineer this so be
  careful.
- Implement pubsubhubbub?
