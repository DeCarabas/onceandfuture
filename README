Todo:
=======

** DUMB NOTE FROM WORK: ADD AND TEST http://rachelbythebay.com/w/

Bugs:
- On Mac and Linux, cannot fetch Julia Evans' blog because of cert
  issues. The bug is that we need to support TLS 1.2, and the released
  version of Mono does not. Here's the status of trying to get things to run:

  Installing Mono on Docker from Alpha packages gets stuck because it doesn't
  have any trusted root certs. The necessary btls-cert-sync program is not in
  any available package, and I have not figured out how to get it into the
  right place. (I guess I could try to build it from source?)

  Installing Mono on Docker by building it from a source snapshot fails
  because I can't change working directories, and the config script doesn't
  work from another directory. (I can work around this with a custom build
  script, but haven't.) I will probably also run into the GDI+ problem.

  Installing Mono on the Mac by building it from git fails because I can't
  get a working libgdiplus for it, and can't figure out how to build
  one. (Cloning and attempting to build the libgdiplus repo on my mac fails
  because something to do with X11 headers, I gave up trying to dig.)

- When a site is unresponsive and timing out, it makes the entire refresh
  period take FOREVER, and there's no understanding of why. A better refresh
  status or something would be useful.


UI:
- Account creation flow
- Account settings view
- Change email address option
- Add/remove river sets
- Sign Out
- Update Progress
- More/less UX is jarring.
- Import/export OPML
- Font size for bubbles is wrong.
- When removing a feed, remove from sources.

Back-end Stuff:
- Cache health check results; currently pinging the QA instance very hard.
- Cancellation tokens everywhere
- Single HttpClient (or factory) everywhere
- Measure things:
  - Number of concurrent HTTP connections
  - Latencies of various things
- Replace inline log with static log method
- Login cookie cache scrubber
- Max request size
- Limit on HTTP response sizes, strong timeouts
  - Remember that attackers dictate URLs.

Tests:
- Some known feed snapshots, check to make sure rivers match. (Make sure
  to mock the web and return fake images, &c.)

Shipping:
- Re-pack font awesome fonts
- Use packed/minified/precompiled source if it exists
- Implement ATOM cache timeout and RSS skip hours and the like to poll more
  intelligently.
- Clip titles that are too long. (Because seriously.)

Later:
- Extract enclosures and the like, store locally (in the DB) and present them
  in the river. (Then do UI work to expose audio enclosures and the like.)
- Trim rivers that get too big

Far future:
- For the future, we'll probably need options on individual feeds for
  processing to make them better. It is possible to over-engineer this so be
  careful.
- Implement pubsubhubbub?
